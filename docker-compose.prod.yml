name: valenstagram

services:
  val-db:
    container_name: val-db
    image: postgres:16.8-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/install-extensions.sql:/docker-entrypoint-initdb.d/install-extensions.sql
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=val
      - POSTGRES_USER=val
      - POSTGRES_PASSWORD=val
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U val"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - backend

  api:
    container_name: api
    build:
      context: ./
      dockerfile: Dockerfile
    restart: always
    expose:
      - 8000
    environment:
      - SECRET_KEY=PL4ES3CH4NG3M3
      - SQLALCHEMY_DATABASE_URI=postgresql://val:val@val-db:5432/val
      - FLASK_DEBUG=False
      - SWAGGER_URL=/api/docs
      - API_URL=/static/openapi.json
      - SERVER_PORT=8000
      - SERVER_HOST=0.0.0.0
      - WORKERS=${GUNICORN_WORKERS:-3}
    depends_on:
      val-db:
        condition: service_healthy
    command: gunicorn --workers ${GUNICORN_WORKERS:-3} --timeout 60 --bind 0.0.0.0:8000 wsgi:app
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes:
      - ./public/uploads:/home/app/public/uploads
    networks:
      - backend
      - frontend

  nginx:
    container_name: nginx
    build: 
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - '80:80'
    restart: always
    volumes:
      - ./nginx/default.conf:/tmp/default.conf
      - ./public/uploads:/home/app/public/uploads:ro
    environment:
      - FLASK_SERVER_ADDR=api:5000
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:80/health-check || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - frontend

networks:
  frontend:
  backend:

volumes:
  postgres_data: