name: valenstagram-backend

services:
  val-db:
    container_name: val-db
    image: postgres:16.8-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/install-extensions.sql:/docker-entrypoint-initdb.d/install-extensions.sql
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-val}
      POSTGRES_USER: ${POSTGRES_USER:-val}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-val}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-val} -d ${POSTGRES_DB:-val}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend
    ports:
      # Exposer le port seulement en mode développement
      - "${DB_PORT:-5432}:5432"

  val-api:
    container_name: val-api
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ENV: ${API_ENV:-production}
    restart: unless-stopped
    ports:
      - "${SERVER_PORT:-5000}:5000"
    environment:
      # Configuration Flask
      FLASK_APP: ${FLASK_APP:-wsgi.py}
      FLASK_ENV: ${API_ENV:-production}
      API_ENV: ${API_ENV:-production}
      
      # Configuration base de données
      DATABASE_URL: postgresql://${POSTGRES_USER:-val}:${POSTGRES_PASSWORD:-val}@val-db:5432/${POSTGRES_DB:-val}
      POSTGRES_USER: ${POSTGRES_USER:-val}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-val}
      POSTGRES_DB: ${POSTGRES_DB:-val}
      
      # Configuration sécurité
      SECRET_KEY: ${SECRET_KEY_APP}
      SECRET_KEY_JWT: ${SECRET_KEY_JWT}
      
      # Configuration serveur
      SERVER_HOST: ${SERVER_HOST:-0.0.0.0}
      SERVER_PORT: ${SERVER_PORT:-5000}
      
      # Configuration Swagger
      SWAGGER_URL: ${SWAGGER_URL:-/api/docs}
      API_URL: ${API_URL:-/static/openapi.json}
      
      # Mode production
      FLASK_PROD: ${FLASK_PROD:-true}
    volumes:
      - uploads_data:/app/public/uploads
      - ./logs:/app/logs
    depends_on:
      val-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - frontend
      - backend

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local

networks:
  backend:
    driver: bridge
    internal: true
  frontend:
    driver: bridge