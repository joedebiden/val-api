name: val-backend-prod

services:
  val-db:
    container_name: val-db
    image: postgres:16.8-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - backend

  val-api:
    container_name: val-api
    image: evanhs/val-api:latest
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DATABASE_URL_TEST: ${DATABASE_URL_TEST}
      SECRET_KEY: ${SECRET_KEY}
      MQTT_HOST: ${MQTT_HOST}
      MQTT_USER: ${MQTT_USER}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
    volumes:
      - uploads_data:/app/public/uploads
      - ./logs:/app/logs
    depends_on:
      val-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - frontend
      - backend

  mqtt-prod:
    image: eclipse-mosquitto
    container_name: mqtt-prod
    restart: unless-stopped
    environment:
      MQTT_HOST: ${MQTT_HOST}
      MQTT_USER: ${MQTT_USER}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
    volumes:
      - ./mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mqtt/entrypoint.sh:/mosquitto/entrypoint.sh
      - ./mqtt/data:/mosquitto/data
      - ./mqtt/log:/mosquitto/log
      - ./mqtt/config:/mosquitto/config
    ports:
      - "1883:1883"
      - "9001:9001"
    entrypoint: [ "/mosquitto/entrypoint.sh" ]
    networks:
      - frontend

volumes:
  postgres_data:
  uploads_data:

networks:
  backend:
    driver: bridge
    internal: true
  frontend:
    driver: bridge
