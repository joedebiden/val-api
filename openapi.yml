openapi: 3.0.0
info:
  title: Social Media API
  description: API for social media platform with authentication, user management, posts, comments, likes, messages, and notifications
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        bio:
          type: string
          nullable: true
        website:
          type: string
          nullable: true
        gender:
          type: string
          nullable: true
        profile_picture:
          type: string
        created_at:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        caption:
          type: string
        image_url:
          type: string
        created_at:
          type: string
          format: date-time

    Follow:
      type: object
      properties:
        id:
          type: string
          format: uuid
        follow_id:
          type: string
          format: uuid
        followed_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time

    FollowerInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        profile_picture:
          type: string
        followed_at:
          type: string
          format: date-time

    FeedPost:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        username:
          type: string
        user_profile:
          type: string
        caption:
          type: string
        image_url:
          type: string
        created_at:
          type: string
          format: date-time

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "account created successfully."

  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjRkYzcwNDEzLTEwOTQtNGY4Zi04Y2ZhLTg3YzhlYzkzMDNlYSIsImV4cCI6MTc0MDE2NjA4OX0.zc2DpJ8J07vy6WPZNeOkmc26dnLfZQQwSbuodxwss5s"

  /auth/token:
    post:
      summary: Verify a token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Token valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true

        '401':
          description: Token invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: false


  /user/profile:
    post:
      summary: Get current user profile
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /user/edit:
    post:
      summary: Update user profile
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                bio:
                  type: string
                website:
                  type: string
                gender:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile updated successfully"
                  user:
                    $ref: '#/components/schemas/User'

  /user/upload-profile-picture:
    post:
      summary: Upload profile picture
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "File uploaded successfully"
                  file_url:
                    type: string
                    example: "/user/profile-picture/amazing_picture.jpg"

  /user/profile-picture/{filename}:
    get:
      summary: Get profile picture
      tags:
        - Users
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Profile picture
          content:
            image/*:
              schema:
                type: string
                format: binary

  /user/profile/{username}:
    get:
      summary: Get profile of a specific user
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile information
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The user profile info"
                  username:
                    type: string
                  bio:
                    type: string
                  website:
                    type: string
                  profile_picture:
                    type: string

  /user/search/{username}:
    get:
      summary: Search for users by username
      tags:
        - Users
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Users found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Users found"
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                        profile_picture:
                          type: string

  /follow/follow:
    post:
      summary: Follow a user
      tags:
        - Follows
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username_other
              properties:
                username_other:
                  type: string
      responses:
        '200':
          description: Follow successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Followed successfully"
                  follow:
                    $ref: '#/components/schemas/Follow'

  /follow/unfollow:
    post:
      summary: Unfollow a user
      tags:
        - Follows
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username_other
              properties:
                username_other:
                  type: string
      responses:
        '200':
          description: Unfollow successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unfollow successfully"
                  users:
                    type: object
                    properties:
                      ex-followed-id:
                        type: string
                        format: uuid
                      ex-follower-id:
                        type: string
                        format: uuid

  /follow/remove-follower:
    post:
      summary: Remove a follower
      tags:
        - Follows
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username_other
              properties:
                username_other:
                  type: string
      responses:
        '200':
          description: Follower removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Delete follow relation successfully"
                  users:
                    type: object
                    properties:
                      ex-followed-id:
                        type: string
                        format: uuid
                      ex-follower-id:
                        type: string
                        format: uuid

  /follow/get-follow/{username}:
    get:
      summary: Get followers of a user
      tags:
        - Follows
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of followers
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  followers:
                    type: array
                    items:
                      $ref: '#/components/schemas/FollowerInfo'

  /follow/get-followed/{username}:
    get:
      summary: Get users that a user follows
      tags:
        - Follows
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of followed users
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  followed:
                    type: array
                    items:
                      $ref: '#/components/schemas/FollowerInfo'

  /post/upload:
    post:
      summary: Upload a post
      tags:
        - Posts
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - caption
              properties:
                file:
                  type: string
                  format: binary
                caption:
                  type: string
      responses:
        '200':
          description: Post uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Post uploaded successfully"
                  post:
                    type: object
                    properties:
                      caption:
                        type: string
                      created_at:
                        type: string
                        format: date-time
                      user_id:
                        type: string
                        format: uuid
                  post_url:
                    type: string
                    example: "/post/c7013664-db3d-45c5-a3c5-2680448170c6"

  /post/{post_id}:
    get:
      summary: Get a specific post
      tags:
        - Posts
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Post found"
                  post:
                    $ref: '#/components/schemas/Post'

  /post/feed:
    get:
      summary: Get user feed
      tags:
        - Posts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User feed loaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Feed successfully loaded"
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/FeedPost'