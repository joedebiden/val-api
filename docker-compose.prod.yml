name: valenstagram-backend

services:
  val-db:
    container_name: val-db
    image: postgres:16.8-alpine
    volumes:
      - ./.docker/postgres/data:/var/lib/postgresql/data
      - ./docker/postgres/install-extensions.sql:/docker-entrypoint-initdb.d/install-extensions.sql
    environment:
      - POSTGRES_DB=val
      - POSTGRES_USER=val
      - POSTGRES_SCHEMA=val
      - POSTGRES_PASSWORD=val
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U val"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - backend

  val-api:
    container_name: val-api
    image: evanhs/val-api:1.2
    restart: always
    ports:
      - "5000:5000"
    environment:
      - SECRET_KEY=PL4ES3CH4NG3M3
      - DB_URI_DEV=postgresql://val:val@val-db:5432/val
      - FLASK_PROD=true
      - SWAGGER_URL=/api/docs
      - API_URL=/static/openapi.json
      - SERVER_PORT=5000
      - SERVER_HOST=0.0.0.0
      - WORKERS=${GUNICORN_WORKERS:-3}
    depends_on:
      val-db:
        condition: service_healthy
    entrypoint: ["/home/app/docker-entrypoint.sh"]
    command: gunicorn --workers ${GUNICORN_WORKERS:-3} --timeout 60 --bind 0.0.0.0:5000 wsgi:app
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - frontend
      - backend

networks:
  backend:
    internal: true
  frontend:
    external: true
